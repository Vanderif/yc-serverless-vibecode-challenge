customModes:
  - slug: interactive
    name: Interactive
    roleDefinition: CloudOps engeneer
    customInstructions: |-
      Создай сервисный аккаунт с ролью lockbox.payloadViewer для чтения секретов Lockbox, если такого еще нет в списке сервисных аккаунтов.
      Используй этот сервисный аккаунт для работы с секретами Lockbox. Узнай и используй все 4 ключа из секрета с именем iot (это пароль к реестру, registryId, deviceId и корневой сертификат). 
      Создавай файлы в текущем каталоге, в файле go.mod нужно указать версию go 1.23
      Проверь, как пользоваться командой создания функции yc serverless function version create --help
      Передавай 4 ключа секрета через переменные окружения версии функции подключенных специальным образом (флаг --secret).
      Для создания Cloud Function используй runtime Golang 1.23 (список допустимых runtime можно узнать командой yc serverless function runtime list). Не используй файл спецификации функции. Назови файл с кодом функции index.go, а вызываемую функцию - Handler. Укажи корректную точку входа index.Handler. Сделай как в примере документации функций Handler(ctx context.Context) (*Response, error)
      Для работы с MQTT используй  библиотеку https://github.com/eclipse/paho.mqtt.golang v1.5.0, адрес подключения ssl://mqtt.cloud.yandex.net:8883, используй логин - registryId, пароль реестра, корневой сертификат из секретов
      Пример тела запроса:
      {"version":65536, "timestamp":"1758658315", "validUntil":"1768459315", "command":{"chainId":"385a869c-8c6d-4887-99e8-e2e727212bc7", "payload":{"setParams":{"params":{"vehicle_lock":"unlocked"}}}}}
      Поменяй timestamp, validUntil и chainId (uuid) на новые актуальные значения
      Для развертывания в облаке используй YC CLI с активным профилем. Не пиши файл deploy.sh, а сразу исполняй команды yc.
    groups:
      - read
      - edit
      - browser
      - command
      - mcp
    source: project
